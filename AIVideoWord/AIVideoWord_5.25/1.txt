好，大家可以打开现在目录下的一个叫py_intro，然后我们从第1节开始，语言编程环境。第一课，有谁知道Guido Van Rossum？python之夫。谁知道他名字怎么念。怎么念？这看起来不像一个条件，
英文名，就是他的名字有点像西班牙语，。。。。。我念的其实不对，但是大部分英语发音的人念他的名字念其实不是这样念的，就是他，他是python作者，然后，我这个，这个notebook里有很多例子。
这些例子有一些我会在课堂上带大家看有一些你们下课了自己去看，有一些很长，然后，这是他的主页，他的主页在github的io上，然后，你在他的这个主页里面你往下你可以看见这个东西有一个soundclick
这是一个他念他自己名字，对，他其实念起来有点像（hu），对，就是荷兰语发音，对，不是很好念，这是python作者，然后，我们这个环境里面七七八八的link，各种各样的link，那么，你们自己用的时候
你们可能注意到了，比方说，额，它这里有个Help，看的见吗，就这里有一大堆reference，有一大堆的reference，那么，这是你的第一个可以查阅的地方，因为它很快，就是我们课上用到的所有东西在这里
都可以查得到Python，Ipython，SciPy一大堆的东西，然后，后面我会告诉你们更快速的查阅这些文档的方法，好，回到python作者这里。看下这个东西，这个大家应该都访问过吧，这就是python的官网，我们访问表较慢
我一会会给大家放一个video，这个video是谁呢，是Peter Norvig 在interview这个Guido Van Rossum.,Peter Norvig是一个很有名的人，应该说我们这个行业里的大佬，然后，他其实也没有念对这个名字，我们可以听一下
 （视频 ）我们听最开头的一段，你可以听到他的念法就是一般美国人会念他的名字的念法，他其实也不理了，也没有纠正，然后我们听他下面讲的。就是他刚才讲的这个语言这个语言的abc就是python的前身，
他做这个东西是为了教学的，就是为了教小孩子写程序的，所以，从原图上来说呢，这个语言非常简单，他就是为了大家可以很容易的去教，很容易的去学，然后他讲一些这个语言设计的想法，然后他就讲了一个他自己的困境，
他说我想做一个脚本员，我为什么要做一个脚本员？因为我那个时候，那个，os的脚本环境不是很好用，但是你也可以用c写，用c写，用c写你什么都可以干，但是c很困难，然后写出来的东西，就要很久才能跑起来，有可能你写到最后，最后发现，
我的数据结构不对，然后就要从头再来，整个开发的效率变得很低，所以他决定搞一个中间的语言，所以我们的一些印象就是，他应该比较本强大一些，但是他要比c弱，这一点是非常重要的，尤其是我们这节课，我们用到最后，大家感觉自己在用python写
machine learning的东西，在写deep network，其实不是的，其中大部分code都跟他没有关系，他最终都会掉到python的c的里面当中去，这是真正heavy，真正dirty的work，其实是在python底下的那层东西，我们现在只要记住这点，但是，我们为什么不直接去写c呢？
因为比较麻烦，我们可以谈一些比较有意思的事情，Peter Norvig，这个人就是Peter Norvig，然后你看他的block，他其实很有意思，他很早开始就是做AI的，他80年代的时候就在做AI，然后后来AI在80年代就做不下去了，然后这个时候就叫AI Winter，然后，他去干什么了呢？
他就去写浏览器，他有个手下非常有名，叫恩斯特，他是写scheme的，这是第1个浏览器，他的后面研发了什么火狐，然后，Peter Norvig他，就是影响比较大的事，其实是他去Google. 他去Google呢，他是负责Google，就是整个research和engernning的AP。
就是Google呢，它和其他公司不一样，比方说和Microsoft不一样，Google的工程师和研究员是不分的，他没有独立的两种tite，这种人叫engineer，这种人叫researcher，他们都是混起来的，然后，Peter Norvig在整个Google.setup一整套technic的infor structure，
就比方说Google所有code大家都可以access的，大家用一个code base，然后，比方说Google他会设定那个时代，一共有4个主力的开发语言。