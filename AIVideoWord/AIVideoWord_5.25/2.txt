唉，比如说我喜欢这个语言，我用这个来，其实他最强的是linex语言，然后，他比较有名的就是，有人说，我们在google搞一个Linex，然后他定了4个语言，是哪4个呢？就是大家会比较，c，c++就是
google比较底层的语言，然后，python，python是在Google那边一开始是被当作脚本使用的，然后后来，machine learning，deep learning出来以后，大家发现可以用python来写一大堆的东西，然后，
java，java这个东西，在最早的年代里面就是用来写客户端的，然后，现在呢？他又发展到APP理，比如说安卓，安卓的应用程序就是用Java写的，然后，还有一种语言，非常重要，是JavaScript. 
Google用了非常大的力量在浏览器里面，那个Chrome，在大概2008年左右，忽然崛起的一个重要原因是，Chrome自己做了一个很棒的JavaScript的引擎，JavaScript的第1个GIT的引擎，然后，我们看到他，
对于写程序有什么看法？她对写程序有一段很精辟的论述，我们可以看一下这个链接，我把它总结为不要着急，他为什么写这个东西呢？有一阵有一些书很流行，什么21天学会c++？之类的，21天学会c加加是什么呢？
其实你想想我们课不是21天学会c++，我们是两天学会Python，好像也就是他这个例子，就是你不可能24小时内学会什么东西，你这是胡扯的，然后他讲了一大篇，这个文章非常有名，有好多翻译，他说，
如果你想要学会编程序，你需要用10年，Teach Yourself Rpogramming in Ten Years。然后10年，这个数听起来好像是胡编的。不是的，他这个数据不是胡编的，他是怎么来的，他是怎么算出来的？要10年？
这个人的书，他只要写书就一定是New York. times出版的，很早时候买过他一本书，但是我不知道他是谁，后来我又买了他一本书，我后来发现他俩是一个人，他还在反复出现，他每过几年，就会有一本，
他写的一本书就是它Peter Norvivg一万小时规则，什么意思？就是你想掌握任何事情，我说的不对啊，你想变成一个领域里面的超级高手，你需要1万小时，大家可以想一想，1万小时是一个很大很大的数，
假设你每天花两个小时，你每天拿出来单独两个小时干一件事情，你需要付出额外很多的努力的，那么你需要5000天，5000你除一下，不是10年，大概是10年15年，非常辛苦。就是如果你看他的说的话，你会发现，
你根本没法去驳倒他，因为他非常雄见，他举了很多例子，他举了一个Beatles.，是一个乐队，Beatles在回英国前，他们在汉堡，在演奏啊，演唱啊，不停的打磨他们的技能，然后他说他们花了1万小时，所以非常的了不起，
然后第2个人，比尔盖茨，比尔盖茨为什么符合这个数字呢？1万个小时，他说比尔盖茨13岁的时候，他家里面有条件给他搞一个计算机，比尔盖茨是1955年出生的，他13岁的时候是1968年，1968年对于大多数人来说，
根本就没有听说过计算机，1968年还是大前期的时代，所以他差不多用了十几年的时间，把自己变成一个非常skillful的人，我在微软听过一些故事，就是他能记住自己十几年前写过的code，而且扣的时候非常小，
12岁，13岁，也符合这个规律，反正他举了一大堆人的例子，但是呢，你知道就是一旦提出一个这样的观点，就是说，1万小时才行，越会有人challenge你，为什么，我就觉得你这一万个小时不需要
我们看一下这个1万小时天才理论，他这本书，刚才Peter Norvig讲的outlier，这个作者。然后我们来看一个质疑，（视频）我觉得他这里非常好，就是因为大家focus非常容易聚焦在数字上，就是你说一句话，
然后这句话里面有一个数字，大家一般就会去记那个数字，所以，大家只记住了1万，而忘记了1万什么？他argue的点就是1万个小时是做世界冠军，但是我不需要做世界冠军，我只是想学一些我感兴趣的东西，
我甚至不需要是个专家，我只要自己感到很happy，自己感到很fine就ok了，但是拿出1万个小时来，你算10年15年20年，很多人就被吓退了，哎，我好像我年龄还够吗？我也不是十三岁就开始access computer. 
我还要学programing，他argue的点其实是，他怎么challenge这个理论？他challenge这个理论其实在传播过程中，大家对他的误解，一个误传，这个理论就变成了1万小时，你无论干任何事情都要1万小时，
不是的，其实你不需要1万个小时，然后他在后面就提出来一个，一个数字也很夸张，我想该哭的点在这里差不多都讲完了，他说20个小时，我们在课堂上差不多就有12个小时，我们课下还要再练。好不管怎么样，
我们可以开始start了，20个小时是一个很好的，它不会引起你心理上任何的压力，20个小时很cheap，我就是浪费20个小时，我经常浪费20个小时，20个小时就是两三天的时间，这是一个周末，你把一个周末，
全部用来试一试。我们再来看一看这个谁，Guido，他在Hithub上面有账号，你们回去可以点一下这个link看一下，看一看，github上会有什么东西？推特上，也更新得很勤，他在flow上也回答问题，但是，
关于Python的问题，他不在flow上回答，他在flow回答的都是谷歌产品的问题，然后我呢写这个教案的时候，我就去看了一下他这个推特的账号，发现一个很有意思的事情，我发现他更新的很及时，他这个在说什么？
这有个前两天比较热门的话题，它上面这个图很有意思啊，为什么Microsoft? 这个是Github先爆出来的事，因为这些程序员在Github上commit，然后github是Microsoft的产品，然后这有点，这个跟Microsoft没多大关系，
但是你再仔细看，看这里，南方早报，南方早报是马云的报纸，所以就是这些媒体啊，贴了个这样的图片，其实是别有用心的，你看这个争论，起始点是马云的瞎放炮，然后看不到马云，东方早报搞了个Microsoft. 
就好像Microsoft在搞。我们回到正题，Python,是我们是不需要知道任何东西的，我们马上就可以开始写code的，但是在写之前呢，我先跟大家强调一点，这一点，一定会让你很难受的，你一定会遇到这个问题，
这个问题就是python的版本，可以用一个字来形容，就是乱，非常非常的乱，我也不知道怎么回事，可能跟他的communicate很有关系，它主要有两大类版，不是有两个版本，一堆叫2，一堆叫3.然后呢？
他不是向后兼容的，就是说你以前写的脚本在，python3上可能是run的，然后，你如果用python3写，在python2上就不能执行，因为语法变了，东西没有了，哪怕是3. 在3里面的东西是不一样的，3.6.4 3.6.5. 
就有区别，然后我们用这个，其实我们今天用的，我们整个课程里用到的python，都不会触及到这个问题，因为这些东西都跟新的IO有关系，另外，其实我们也已经解决了这个问题，我们已经把版本固定在3.6.5了，
我们用的解决方法就是Doctor.我不光fix了python，我们还fix来和python相关的一大堆问题。大家可以试一下，就是你们就可以自己试一下这个东西，就是比方说这里，有一个new看见了没有？你在第1个页面，这里有个new
然后你点new有个terminal，你会起来一个terminal，这个terminal是doctor里面的terminal. 你可以试一下，python的版本，然后，所以你看，这是一个很好玩的tool，里面有一个notebook. 我们还有一个terminal的access.
就是我们现在这个notebook.  有python的terminal. 我们没有其他语言，我们这个continer上其实是有很多语言的，我们可以试一试，我们上面有个c语言，给你们演示一下，看这是一个c的编译器，现在可以用c code，
然后你运行这个complier，可执行文件，C编译器通常是个很大的工作，我们这个工具做的原则是，如果有小的，就选那个小的，如果有更小的，那就选更小的，把他选到最小的，这个tcc的东西，非常非常非常小，
这个tcc的作者也是一个很有名的programer，我以后会跟你们讲，这是一个非常好的东西，你看这是我们刚才已经看到了这个，就是python，比较难的一端是c. 比较简单的是shell，然后我们这个里面其实是有c的compyler.
其实还有一些其他东西，我以后再告诉你们，另外一个比较著名的是，就是今天我给大家讲这个课，其实就是，我觉得如果，这个第1部分我大部分也还没有注意听，就略过了，无所谓，反正是讲一些知识性的东西，
不知道也无所谓，但是，这个东西你是绕不过去的，就是如果你不理解这个概念，你会遇到很多很多麻烦，如果你能理解这个概念，你会发现，哦，这个世界原来是相通的，所有东西都是遵循同样的规则的，然后，
我想讲的三个主要的概念就是，shell，Script，REPL，shell和script你们肯定知道是啥东西，powershell，REPL是首先要重点讲的，shell是一个很简单的东西，我有一个命令，我想要命令计算机干一些事情，
我就可以告诉他，他就像长一个耳朵，我们去告诉他，这是一个命令输入的地方，还有一个script. script. 其实就是一个命令，这是我有一堆命令，script就可以把它理解成我的命令，然后，Repl.是4个单词的缩写，
read，evaluate，print，loop，这4个单词是站在shell，计算机的角度，来理解的，read是计算机的read， 计算机的read的命令，然后他read了这个命令，然后他读懂了，然后他就会去执行这个命令，evaluate，
然后它执行完了以后，他就会告诉你执行的结果，就像你让一个人去干一件事情，他干完了后回来向你汇报一下，他会告诉你结果是什么，然后这三个其实就构成了一个loop，就是计算机，读你的命令，然后他执行，
他打印，然后你发现哎不对，我搞错了，然后再来，又搞错了再来，就是这样，这是一个loop，这个loop，是一个非常关键的概念，因为我们刚才讲过就是1万小时理论，20个小时理论，不管它多少小时理论，
你都可以把它细分成很多loop，不是多少个小时来决定你是否学会了，而是你run了多少个loop，如果你run的loop的时间非常非常短，你有输入，马上能看到结果，然后立即修改，比方说你这个loop，可以改到一秒钟以下，
甚至比这个还快，甚至以飞快的速度在滚动这个，而且对于一个程序员来说，最关键的一点是，我们其实是非常容易分散注意力的，我们经常就被别的事情给吸引走了，如果这个loop的时间很长，
我开始告诉他，唉，我去执行这个事情，然后他就开始去执行，可能要等6个小时，中间你干什么？不算6个小时就算半个小时，中间你都会去干别的事情，比如打开网页看看别的东西，拿出手机来刷一刷，然后你lost了，
你focus lost了，不知道自己在干什么，你的效率就会非常低，但是如果这个loop很短，会紧紧的抓着你，它把你给滚到这个过程中去，你的大脑会跟他一直都在交流，你的工作效率会非常高，那么你的20个小时，比方说，
一个小时的loop，你其实知只有20分钟，我们做一下练习，这个练习就是有点，有点不算python的内容，我做这个练习重要的原因是，python的这些概念，其实是从unix的系统里面来的，那么你想理解这些概念，
python当然很好，当然，包括我们今天用的猪皮特，也非常好，但是我们还是需要到原则上去understand这些东西是怎么来的？他的basic idea是非常非常简单。这里有一个很长的命令行，你们可以把它复制下来，然后运行一下，
注意一下，这里应该有一些空格的。第2个笑话





















 